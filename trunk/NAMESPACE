export(asEuclidean, asHomogeneous, aspect3d, axes3d, axis3d, box3d,
        bbox3d, bg3d, clear3d, cube3d, decorate3d, dot3d, ellipse3d,
	grid3d, identityMatrix,
	light3d, lines3d, material3d, mtext3d, 
	oh3d, open3d, par3d, particles3d, persp3d, plot3d, points3d, pop3d,
	qmesh3d, quads3d, rgl.bbox, rgl.bg, rgl.bringtotop, rgl.clear,
	rgl.close, rgl.cur, rgl.ids, rgl.init, rgl.light, rgl.lines, rgl.linestrips,
	rgl.material, rgl.open, rgl.points, rgl.pop, rgl.postscript,
	rgl.primitive, rgl.projection, rgl.quads, rgl.quit,
	rgl.select3d, rgl.set, rgl.snapshot, rgl.spheres, rgl.sprites,
	rgl.surface, rgl.texts, rgl.triangles, rgl.user2window,
	rgl.viewpoint, rgl.window2user, r3dDefaults, rotate3d, rotationMatrix,
	scale3d, scaleMatrix, segments3d, select3d, shade3d,
	spheres3d, sprites3d, subdivision3d, surface3d, terrain3d, text3d,
	texts3d, title3d, transform3d, translate3d, translationMatrix, triangles3d,
	view3d, wire3d)
 
 S3method(dot3d, qmesh3d)
 S3method(wire3d, qmesh3d)
 S3method(shade3d, qmesh3d)
 S3method(translate3d, qmesh3d)
 S3method(rotate3d, qmesh3d)
 S3method(scale3d, qmesh3d)
 S3method(subdivision3d, qmesh3d)
 
 S3method(translate3d, default)
 S3method(rotate3d, default)
 S3method(scale3d, default)
 
 S3method(ellipse3d, default)
 S3method(ellipse3d, lm)
 S3method(ellipse3d, glm)
 S3method(ellipse3d, nls)
 
 S3method(plot3d, default)
 S3method(plot3d, qmesh3d)
 S3method(persp3d, default)
 
 if(tools:::.OStype() == "windows") {
   import(utils) # only needed for getWindowsHandle
 }
 
 if (.Platform$GUI == "AQUA" && file.exists(system.file("libs",.Platform$r_arch, "aglrgl.so", package = "rgl"))) { 
   useDynlib(aglrgl, rgl_init, rgl_dev_open, rgl_dev_close, rgl_dev_getcurrent, rgl_dev_setcurrent,
   		     rgl_snapshot, rgl_postscript, rgl_material, rgl_getmaterial, rgl_getcolorcount,
   		     rgl_dev_bringtotop, rgl_clear, rgl_pop, rgl_id_count, rgl_ids, rgl_viewpoint, 
   		     rgl_bg, rgl_bbox, rgl_light, rgl_primitive, rgl_surface, rgl_spheres, rgl_texts,
   		     rgl_sprites, rgl_user2window, rgl_window2user, rgl_selectstate, rgl_setselectstate, 
   		     rgl_par3d=par3d, rgl_quit)
 } else {
   useDynLib(rgl,    rgl_init, rgl_dev_open, rgl_dev_close, rgl_dev_getcurrent, rgl_dev_setcurrent,
   		     rgl_snapshot, rgl_postscript, rgl_material, rgl_getmaterial, rgl_getcolorcount,
   		     rgl_dev_bringtotop, rgl_clear, rgl_pop, rgl_id_count, rgl_ids, rgl_viewpoint, 
   		     rgl_bg, rgl_bbox, rgl_light, rgl_primitive, rgl_surface, rgl_spheres, rgl_texts,
   		     rgl_sprites, rgl_user2window, rgl_window2user, rgl_selectstate, rgl_setselectstate, 
   		     rgl_par3d=par3d, rgl_quit)
 }
 